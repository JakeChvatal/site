#+TITLE: Todo
* DONE move css to git submodule
CLOSED: [2020-08-04 Tue 19:33]
css should be shared across all sites with the same design langauge
* DONE add a /now page
CLOSED: [2020-08-04 Tue 19:33]
:PROPERTIES:
:ID:       5e2d1073-bfe9-4087-b440-f6eb403e2020 :END: maybe this should go on the wiki or a blog or something
this should be a quick org mode file that can be easily linked to
to provide an overview of what i am currently doing and link to other things
do i even need/want to expose this?
* DONE figure out how to add a website image that will show as a preview
CLOSED: [2020-08-05 Wed 19:28]
:PROPERTIES:
:ID:       69f287ad-15f6-4cd7-8123-aaaa8216a0a8
:END:
interested in doing this for linkedin and maybe messaging services or other sites
https://andrejgajdos.com/how-to-create-a-link-preview/ this is how you can do it
* TODO add pgp key
* DONE improve css for /now page
CLOSED: [2020-08-04 Tue 23:45]
currently it looks good but kind of boring
* TODO enable links on /now page
currently links are not rendered as part of the orgparse library
when they are, make sure that they're rendered in the jinja template
this requires rewriting the orgparse library...
* TODO Add dark mode
Dark mode can be approached entirely with CSS3 so this can be tackled
without javascript. If it doesn't work in every browser, whatever; dark mode isn't super important.
This should later be added to the CSS framework if testing here goes well.
* CANCELLED consider changing site style and fusing /now with main page
CLOSED: [2020-08-04 Tue 23:26]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2020-08-04 Tue 23:26] \\
  'Now' should explain what I'm doing *now*, while my home page should serve as a more general summary.
:END:
That's kind of the purpose my main page serves anyways?
Why have the same information in multiple places?
* DONE parse and add text that is not in list form
CLOSED: [2020-08-05 Wed 20:05]
I may want to explain some of my decisions!
Rather than correcting after the fact,
it would be better to operate on orgparse upstream,
but I can do this after I've implemented the function here.
It'll be easy to integrate as orgparse feeds plaintext
by default anyways.
* DONE render project descriptions
CLOSED: [2020-08-05 Wed 01:03]
I want to be able to display information about my projects
without tracking them in multiple places.
The best way to do this is to work off of their READMEs.
By adding each project as a submodule and using .org files,
I can render each to a /projects page with a brief summary,
potentially including an image for each project that follows
a specific custom.

Not sure whether it's better to work off of URLs or submodules here;
URLs can change, but it's harder for this to happen when I control them.
It really depends on whether I want CI to automatically update my submodules
every so often or not.

I don't think I need a specific page for each project;
those are explained by each individual GitHub projects' README
(and other documentation) by themselves.
If needed, other resources can be linked in the README summaries
and will be immediately accessible from GitHub.

I could also do the work for multiple different configurations and provide a
user-configurable option as an environment variable or similar.
This seems like the best thing to do going forward.
This is a good idea for a web framework, too!

I think I spent more time writing *about* this than I did writing it;
I ended up implementing the submodule strategy.
* TODO add option for snagging pinned repos for /projects
I can reduce my number of 'sources of truth' by rendering my projects
based on my pinned repositories on GitHub. This will require me to
ensure that each pinned repository is either mine or follows my heuristic
for displaying blurbs of information. Here is how to query those repositories:
https://stackoverflow.com/questions/43352056/how-do-i-make-an-api-call-to-github-for-a-users-pinned-repositories#43358500

https://github.com/graphql-python/gql
use this to query for the flagged repos to get the readmes
this. then
https://www.programcreek.com/python/example/83386/wget.download
with raw.githubusercontent.com
then
read from the files where we put it
same process as before! nice!

This also means that I won't have to worry about submodules.
I can snag the latest version of the content directly from the repository
* TODO add single page application configuration
it's possible that in the future i'll want a single page application
rather than spreading all of this information to all of these different pages.
figure out a good way to 'combine' existing templates with a format that
provides a well-designed single page application experience.
* TODO implement single source of truth templating
the tasks for this effort are specified in https://github.com/jakechv/jakechv,
and information should be sourced from each of the pages there.
* TODO continuous integration
currently, i have to run these scripts manually to update all of my information.
these scripts can and should be run automatically so i don't have to think about them!
* TODO fix site building and query READMEs
currently, readmes are read from sub repositories
as i don't want to give netlify access to these repositories,
i should instead query github's gql api to get the readmes and fetch their first paragraphs

this would make automatically updating based on different projects much easier as well
* TODO add a site for the new web thing
maybe create transpiler from html
maybe create a new target for current transpiler from org mode
either way, make it fun! hot reloading would be cool too . wonder if i can do that

* TODO Use Lighthouse metrics for improving site accessibility and performance
* TODO Packet optimization, manipulate CSS requesting, etc.

* me_irl
https://www.youtube.com/watch?v=dFUlAQZB9Ng
